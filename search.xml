<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>小谈性知觉偏差导致蜜汁自信</title>
      <link href="2021/04/24/%E5%B0%8F%E8%B0%88%E6%80%A7%E7%9F%A5%E8%A7%89%E5%81%8F%E5%B7%AE%E5%AF%BC%E8%87%B4%E8%9C%9C%E6%B1%81%E8%87%AA%E4%BF%A1/"/>
      <url>2021/04/24/%E5%B0%8F%E8%B0%88%E6%80%A7%E7%9F%A5%E8%A7%89%E5%81%8F%E5%B7%AE%E5%AF%BC%E8%87%B4%E8%9C%9C%E6%B1%81%E8%87%AA%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>人生三大错觉：📱振动、👴能反杀（👴确实可以反杀，确实可以啊！）、她喜欢👴</p><p>”Ta喜欢👴为甚么还不承认“，或许可以用性知觉偏差来解释。</p><p>虽然按理来说”Ta明明暗恋我，就是不肯勇敢承认自己的感情“这种错觉是不分男女的，但是一般来说基本上是男性占比多，对于一个普通的、正常的、友好的表示，男性普遍性地容易误解为爱情，在两性中虽然都会有认知不正确的时候，但是男性更容易产生这种Ta喜欢我的夸大型性知觉偏差。</p><hr><p>心理学家做过的研究：</p><p>​    找一些男女大学生来观看某个录像，录像内容是一个教授和一个女学生谈话，女学生想要论文延期，教授和女学生交流得比较友好，嗷，两个演技很精湛的演员也注意了仅仅只是表现友好，不要表现得轻浮和挑逗。</p><p>结果：</p><p>​    女生们：录像中只看到女孩子的友好，关于性感、性诱惑这类的没看出来，而男生们则纷纷表示看出来这个女孩子明显有性方面的展现和诱惑。</p><p>另外的一个研究：</p><p>​    看的是两个男女同学互相在学习的照片，然后图片中的女孩子对这个男的有没有意思。</p><p>结果：</p><p>​    大部分女生看到（觉得）没有啊，两个人很正常啊，但男生一看不对，这个女孩子对这个男孩子有意思，有意思，肯定有意思哈，男生们普遍认为照片中的女孩子心不在焉，心不在学习，表现出了很明显的性感和对男孩子的诱惑。</p><hr><p>这些偏差也并不只适用于普信男（普通而又自信），也适用于一些具有较高配偶价值的人，就比如男领导，事业有成型男人更容易产生这种错觉，欸，👴的女下属这些人对👴有意思奥，所以一些工作场景中的性骚扰问题也源于此 。</p><p>女性明明只是一种友好的表示，但对方却往往可以误解为她是对我心有所属，更有意思的是，当男性遇到漂亮的性感的女性的时候更容易产生这种偏差，主要想一想，人家漂亮的妹子择偶标准都已经够高了，为甚么就这么那啥而不知呢。</p><p>其原因就在于漫长的人类进化过程中，我们知道，两性从进化的根源上来讲，Ta们的性选择、择偶策略是不同的，女性由于孩子的抚养等问题需要一个稳定有资源的男士，所以女性在择偶中都是很慎重的，而男性则不然，Ta在整个生殖过程所负担的并不是那么多，所以男性会追求更多的异性，在更多的两性欢愉之中才能提升自己基因传递下去的比率。</p><p>对于男性而言，Ta对女性的情感认知容易犯两方面错误，一是对方对👴没意思，而👴觉得对方有意思，这是一种误报，另外是对方对👴有意思，而👴判断Ta没意思，这是一种漏报，两种错误权衡下来，男性做出的选择是：宁可误报，不可漏报，宁可错杀一千，不能放过一个。</p><p>进化的动力让男性把任何的女性的好感都解释为性方面的兴趣，所以有了典型的微笑当爱情这种搞法，说白了，这一类的男性呢，就是用下半身思考的动物。</p><p>不过最后还是说一句，并不是所有的男性都是这个样子，本文也只是图一乐，开开玩笑，调侃几句。</p><p>差不多得了，溜之。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些shell的骚操作</title>
      <link href="2021/04/24/%E4%B8%80%E4%BA%9Bshell%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C/"/>
      <url>2021/04/24/%E4%B8%80%E4%BA%9Bshell%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="构造任意数字"><a href="#构造任意数字" class="headerlink" title="构造任意数字"></a>构造任意数字</h1><p>很久之前无意间发现 <code>$(())</code> 这个好玩的玩意儿，有过一波深♂入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">(()) = 0</span></span><br><span class="line"><span class="meta">$</span><span class="bash">((~$(()))) = -1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="comment"># = 0</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">((!<span class="variable">$#</span>)) = 1</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;<span class="comment">##&#125; = 1</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">((<span class="variable">$&#123;##&#125;</span>&lt;&lt;<span class="variable">$&#123;##&#125;</span>)) = 2</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;<span class="comment">#0&#125; = 4</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过二进制 11 转换为十进制得到 3,4,5,6,7</span></span><br><span class="line"><span class="meta">$</span><span class="bash">(($((<span class="variable">$&#123;##&#125;</span>&lt;&lt;<span class="variable">$&#123;##&#125;</span>))<span class="comment">#$&#123;##&#125;$&#123;##&#125;)) = 3</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">((<span class="variable">$&#123;##&#125;</span>&lt;&lt;$((<span class="variable">$&#123;##&#125;</span>&lt;&lt;<span class="variable">$&#123;##&#125;</span>)))) = 4</span></span><br><span class="line"><span class="meta">$</span><span class="bash">(($((<span class="variable">$&#123;##&#125;</span>&lt;&lt;<span class="variable">$&#123;##&#125;</span>))<span class="comment">#$&#123;##&#125;0$&#123;##&#125;)) = 5</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">(($((<span class="variable">$&#123;##&#125;</span>&lt;&lt;<span class="variable">$&#123;##&#125;</span>))<span class="comment">#$&#123;##&#125;$&#123;##&#125;0)) = 6</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">(($((<span class="variable">$&#123;##&#125;</span>&lt;&lt;<span class="variable">$&#123;##&#125;</span>))<span class="comment">#$&#123;##&#125;$&#123;##&#125;$&#123;##&#125;)) = 7</span></span></span><br></pre></td></tr></table></figure><h2 id="利用-以及数字构造任意数"><a href="#利用-以及数字构造任意数" class="headerlink" title="利用 $ ( ) # 以及数字构造任意数"></a>利用 $ ( ) # 以及数字构造任意数</h2><p><code>$((2#1000001)) = 53</code></p><p>形式: <code>$((2#&#123;二进制&#125;))) = &#123;八进制&#125;</code></p><h2 id="利用-构造任意数"><a href="#利用-构造任意数" class="headerlink" title="利用 $ ( ) ~ 构造任意数"></a>利用 $ ( ) ~ 构造任意数</h2><p>以 <code>$(($(($a))$(($b))$(($c))$(($d))$(($e))$(($f))))</code> 为例子吧：</p><h3 id="含有任何负数的情况"><a href="#含有任何负数的情况" class="headerlink" title="含有任何负数的情况"></a>含有任何负数的情况</h3><p>只要有任意 <code>$(($n))</code> 为负数，则表达式的结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果是正数，则拼接到前一位的末尾</span><br><span class="line">如果是负数，则与前面分开</span><br></pre></td></tr></table></figure><p>比如：<code>$(($((1))$((0))$((-1))$((1))$((2))$((1))))</code> 的情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">(($((<span class="number">1</span>))$((<span class="number">0</span>))$((-<span class="number">1</span>))$((<span class="number">1</span>))$((<span class="number">2</span>))$((<span class="number">1</span>))))</span></span><br><span class="line">=&gt; 1 0 -1 1 2 1</span><br><span class="line">=&gt; (10) + (-1121)</span><br><span class="line">=&gt; -1111</span><br></pre></td></tr></table></figure><p>或者：<code>$(($((-1))$((0))$((-1))$((1))$((2))$((1))))</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">(($((-<span class="number">1</span>))$((<span class="number">0</span>))$((-<span class="number">1</span>))$((<span class="number">1</span>))$((<span class="number">2</span>))$((<span class="number">1</span>))))</span></span><br><span class="line">=&gt; -1 0 -1 1 2 1</span><br><span class="line">=&gt; (-10) + (-1121)</span><br><span class="line">=&gt; -1131</span><br></pre></td></tr></table></figure><p>亦或者：<code>$(($((6))$((0))$((-1))$((1))$((-3))$((1))))</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">(($((<span class="number">6</span>))$((<span class="number">0</span>))$((-<span class="number">1</span>))$((<span class="number">1</span>))$((-<span class="number">3</span>))$((<span class="number">1</span>))))</span></span><br><span class="line">=&gt; 6 0 -1 1 -3 1</span><br><span class="line">=&gt; (60) + (-11) + (-31)</span><br><span class="line">=&gt; 18</span><br></pre></td></tr></table></figure><h3 id="a-为-0-的情况"><a href="#a-为-0-的情况" class="headerlink" title="((a)) 为 0 的情况"></a>((a)) 为 0 的情况</h3><p>当 <code>$(($a))</code> 为 0，且其它都为非负数时，整个表达式的结果最后为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">f * 2 ** 0 + <span class="variable">$e</span> * 2 ** 3 + <span class="variable">$d</span> * 2 ** 6 + <span class="variable">$c</span> * 2 ** 9 ······</span></span><br><span class="line">即从最后的 $(($n)) 开始，往前推，直到第一位</span><br></pre></td></tr></table></figure><h3 id="全部为正数的情况"><a href="#全部为正数的情况" class="headerlink" title="全部为正数的情况"></a>全部为正数的情况</h3><p>如果所有的 <code>$(($n))</code> 都为正数，则全部拼接在一起输出……</p><h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>前不久想折磨一下大一新生，特意去研究了一下</p><p>现在抛出一个问题：现在👴试图读出 /flag.txt 文件，但是👴被限制了字符，只允许使用如下字符，怎解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt; $ ? : ; . &#123; &#125; ~</span><br><span class="line">A D E F H I L M N O P R T S U V</span><br></pre></td></tr></table></figure><p>我们首先看一下，没有小写字母，直接执行命令是不可能的，然后只能想到利用 <code>/bin/cat</code> 这一类的来尝试一下，但是 / 也被过滤了，这个时候我们就要思考一下 / 从哪里来了</p><p>给了大写字母和 $ { } 可以尝试一下利用环境变量，env 这个指令可以获取环境变量，不同人的机子不一样，环境变量也不一样，可能会有所出入，但是我的是 ok 的，所以相信大家的都 ok</p><p>因为 <code>PATH</code> 是 <code>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</code>，所以我们可以尝试取它的第一位，就可以获得 / 了，然后又有 <code>SHELL</code> 为 <code>/bin/bash</code>，所以我们也可以尝试取它的前五位，就是 <code>/bin/</code>，然后就只要考虑后面用哪个命令读取了，但是问题就来了，题目并没有给👴数字，那👴怎么办呢，很简单</p><hr><p>shell 中运行的每个命令都使用退出状态码（exit status）来告诉shell 它完成了处理。退出状态码是一个 0 ~ 255 之间的整数值，在命令结束运行时由命令传给shell</p><p>Linux 使用了 $? 这个专属变量来保存上个执行的命令的退出状态码</p><hr><p>所以我们可以利用 $?  来榨取一个数字，但是我们可以榨取到哪个数字呢，又是否对我们的操作有帮助呢</p><p>Linux 的错误状态退出状态码没有什么标准可遵循，但有一些参考</p><table><thead><tr><th>状态码</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>命令成功结束</td></tr><tr><td>1</td><td>一般性未知错误</td></tr><tr><td>2</td><td>不适合的 shell 命令</td></tr><tr><td>123</td><td>命令不可执行</td></tr><tr><td>127</td><td>没找到命令</td></tr><tr><td>128</td><td>无效退出参数</td></tr><tr><td>128+x</td><td>与 Linux 信号x相关的严重错误</td></tr><tr><td>130</td><td>通过 ctrl+c 终止的命令</td></tr><tr><td>255</td><td>正常范围之内的退出状态码</td></tr></tbody></table><p>emm，”一般性未知错误“</p><p><img src="https://i.loli.net/2021/04/24/DBCWrJxRAa9ctny.png"></p><p>彳亍，那我们就有一个 1 了，不过 2 啥的还没找到咋搞，不过有一个 1 就够了，因为我们还有一个 <code>RANDOM</code> 环境变量可以利用：<code>&lt;A;echo $&#123;RANDOM:~A:$?&#125;</code>，介个样子就可以取到一位随机数了，很玄学的一个地方就是 <code>~A</code> 这个玩意儿似乎在 <code>$&#123;&#125;</code> 可以取到环境变量的最后一位的位置，利用这个点可以玩很多骚的</p><p><img src="https://i.loli.net/2021/04/24/xoP3ThNclKmziE2.png"></p><p>好了，随机个位数字也来了，我们只需要这样：<code>&lt;A;echo $&#123;SHELL::$&#123;RANDOM::$?&#125;&#125;</code>，随机到一个 5 就可以获得 <code>/bin/</code> 辣，那么怎么读文件呢，看了蛮久的 env 后发现，似乎用 tac 是最好的选择，因为最后一位的 t 蛮多的，比如 HOME，USER，MAIL（我的反正是）</p><p><img src="https://i.loli.net/2021/04/24/5SOdXyIuqklrJTm.png"></p><p>然后空格用 $IFS 随便过了，最后文件马马虎虎一个 <code>$&#123;PATH::$?&#125;????.???</code> 代替了 /flag.txt，最终 payload：<code>&lt;A;$&#123;SHELL::$&#123;RANDOM::$?&#125;&#125;$&#123;USER:~A:$?&#125;??$IFS$&#123;PATH::$?&#125;????.???</code></p><p>你别说，我还真读出来了奥</p><p><img src="https://i.loli.net/2021/04/24/PZC6YcRTd2xHIJu.jpg"></p><p>但是很奇怪的一点，就是 <code>/bin/t?? flag.txt</code> 的时候会出现前上图一大串奇怪的乱码，但是直接 <code>/bin/tac flag.txt</code> 不会</p><p><img src="https://i.loli.net/2021/04/24/JPpEVxyIgN9vFsR.png"></p><p>这一点不咋理解，但是无伤大雅</p><p>最后再来一个，我把 &lt; 或者 $? 过滤（就是这俩货连在一起就过滤）的话应该怎么办？</p><p>很简单，用 <code>SHIVL</code> 就 ok 了，SHIVL=1</p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>这会想继续折磨一下大一新生，结合了一下前面的构造数字，应该挺简单的，不秒掉的话就要打PP</p><p>ok，现在抛出一个问题：现在👴试图读出 /flag.txt 文件，但是👴被限制了字符，只允许使用如下字符，怎解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ : &#123; &#125; ( ) #</span><br><span class="line">A D E F H I L M N O P R T S U V</span><br></pre></td></tr></table></figure><p>先不写了，👴也还没仔细想，只是觉得这样可以出，这周末课设，太烦了，睡了</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 奇技淫巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="2021/04/24/test/"/>
      <url>2021/04/24/test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/24/hello-world/"/>
      <url>2021/04/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
